
param int dx = 2;
param int N = 2;
param int counters = 2;

component Delay(chan i) => chan o {
	chan wait := Source(type);
	let o := CtrlJoin(i, wait)
};

component CreditCounter(chan i) => chan o {
	chan q_in;
	let q_in, o := Fork(Source(type));
	Sink(CtrlJoin(Queue(counters, q_in), i))
};

component DualChannel(bus<2> i) => bus<2> o {
	chan count_rsp, count_req;

	chan data_in := Merge(CtrlJoin(i[0], count_req), CtrlJoin(i[1], count_rsp));
	chan data_out := Queue(dx, data_in);


	chan buffer_req_in, buffer_rsp_in := Switch(type, data_out);

	chan buffer_req_out := Queue(N, buffer_req_in);
	chan buffer_rsp_out := Queue(N, buffer_rsp_in);

	chan req_out, rsp_out;
	let o[0], req_out := Fork(buffer_req_out);
	let o[1], rsp_out := Fork(buffer_rsp_out);

	let count_rsp := Queue(N, Queue(dx, CreditCounter(rsp_out)));
	let count_req := Queue(N, Queue(dx, CreditCounter(req_out)))
};


component Agent(bus<2> i) => bus<2> o {
	let o[0] := Source(type);
	Sink(i[1]);

	let o[1] := Function(type, Delay(i[0]))
};

bus<2> agent0_in;
bus<2> agent0_out := Agent(agent0_in);
bus<2> agent1_out := Agent(DualChannel(agent0_out));
let agent0_in := DualChannel(agent1_out)