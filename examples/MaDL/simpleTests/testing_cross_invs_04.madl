// testing generation of cross layer invariants

const ireq;
const tack;
const tx;

process p0 (chan input) => chan output {
	state s0() {
		trans {
			ireq -> output;
			next s1();
		};
	};
	state s1() {
		trans {
			tack d <- input;
			next s2();
		};
	};
	state s2(){
		trans {
			tx -> output;
			next s0();
		};
	};
};

process p1 (chan input) => chan output {
	state s0 () {
		trans {
			ireq d <- input;
			next s1();
		};
	};
	state s1() {
		trans {
			tack -> output;
			next s2();
		};
	};
	state s2() {
		trans {
			tx d <- input;
			next s0();
		};
	};
};

macro ROB (chan input) => chan output {
	chan rq,x := Switch(input,ireq,tx);
	chan y,z := Fork(Queue(2,rq));// any size works
	let output := Merge(y,CtrlJoin(x,Queue(1,z))); // dl-free for 1 only
};

chan P0_out := Queue(2, p0(P1_out));
chan P1_out := Queue(2, p1(ROB(P0_out)));

