// test of potential bugs

param int N = 2; // deadlock for N>=3. (because queues of size 2)

const req;
const rsp;

const token;

macro CreditCounter(int counters, chan i) => chan o {
	chan q_in;
	let q_in, o := Fork(PatientSource(token));
	Sink(CtrlJoin(Queue(counters, q_in), i));
};

function CreateRsp (p: req) : rsp {
	rsp
};

macro Agent (int N, chan input) => chan output {
	chan pkt1 := Source(req); // an agent sends request
	chan pkt2 := CtrlJoin(pkt1, Queue(N,CreditCounter(N,rspIn))); 

	// Sink requests and produce responses.
    chan reqIn, rspIn := Switch(input, req , otherwise);
	
	let output := Merge(Queue(2,pkt2), Queue(2,Function(CreateRsp,reqIn)));
};

chan out_A1 := Agent(N,Queue(2,out_A2));
chan out_A2 := Agent(N,Queue(2,out_A1));

