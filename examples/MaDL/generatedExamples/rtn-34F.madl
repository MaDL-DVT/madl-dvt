enum source_msg {
    req;
    rsp;
};

pred match_pred(var0 : source_msg, var1 : source_msg) {
    var0 == var1
};


macro reorder_buffer_3_4(chan dataIn, chan idIn, chan fromNetwork) => chan toNetwork, chan dataOut {
    chan idBuffer_match;
    chan returnBuffer_match;
    chan match_noMatchBuffer;
    chan noMatchBuffer_merge;
    chan merge_returnBuffer;
    
    let toNetwork := Queue(3, dataIn);
    let idBuffer_match := Queue(3, idIn);
    let returnBuffer_match := Queue(1, merge_returnBuffer);
    let noMatchBuffer_merge := Queue(3, match_noMatchBuffer);
    let merge_returnBuffer := Merge(fromNetwork, noMatchBuffer_merge);
    let dataOut, match_noMatchBuffer := Match(match_pred, idBuffer_match, returnBuffer_match);
};

macro network(chan dataIn) => chan dataOut {
    
    let dataOut := Queue(2, dataIn);
};


chan source_fork;
chan fork_dataIn;
chan fork_idIn;
chan reorderBuffer_network;
chan network_reorderBuffer;
chan reorderBuffer_sink;

let reorderBuffer_network, reorderBuffer_sink := reorder_buffer_3_4(fork_dataIn, fork_idIn, network_reorderBuffer);
let source_fork := Source(source_msg);
let fork_dataIn, fork_idIn := Fork(source_fork);
Sink(reorderBuffer_sink);
let network_reorderBuffer := network(reorderBuffer_network);
