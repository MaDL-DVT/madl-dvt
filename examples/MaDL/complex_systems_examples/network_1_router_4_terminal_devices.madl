// Generates hypercubes of size X by Y
// closed system

const token_t;


// K is the size of the buffer at each output port
param int K = 1;
// L is the maximum number of packets that the router will store
param int L = 2;
// N is te number of packets that the router injects
param int N = 2;
// TD_CAP is the capacity of a terminal device
param int TD_CAP = 2; // should be equal to total number of packets

// X is the number of routers in the X-dimension
param int X = 1;
// Y is the number of routers in the Y-dimension
param int Y = 1;

// We import the router model
// Note that uses only imports what is inside macro declarations.
uses router_closed_with_constraints;
uses terminal_device;

// Bus with all channels.
// The idea is to declare a bus containing all channels of the network.
// Then, we connect all these channels to the routers and the 
// terminal devices. 

chan east_output, 	// east output
	 west_output,	// west output						
	 south_output,	// south output
	 north_output 	// north output
		:= router_ndcc(K,L,N,
			TD_01, // east input
			TD_02, // west input
			TD_03, // south input
			TD_04)[ROUTER]; // north input


chan TD_01 := terminal_device(TD_CAP,east_output)[TD_EAST]; 
chan TD_02 := terminal_device(TD_CAP,west_output)[TD_WEST];
chan TD_03 := terminal_device(TD_CAP,south_output)[TD_SOUTH]; 
chan TD_04 := terminal_device(TD_CAP,north_output)[TD_NORTH];


// deadlock
// Q___ROUTER__Limiter := 2
// Q___ROUTER__buffEast := 1
// x := 4
// Q___ROUTER__stationEast := 1
// Q___TD_EAST__Queue_1 := 2






