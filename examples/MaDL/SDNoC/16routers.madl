struct package { dst: [3:0]; };
param int WIDTH = 4;param int HEIGHT = 4;
uses XYSwitch;
macro GridRouter0(chan R0_IN_N, chan R0_IN_E, chan R0_IN_S, chan R0_IN_W) => chan R0_OUT_N, chan R0_OUT_E, chan R0_OUT_S, chan R0_OUT_W {pred pred0N (p: package) {p.dst!=0&&(2==1)};pred pred0E (p: package) {p.dst!=0&&((p.dst==5||p.dst==4||p.dst==0||p.dst==1))};pred pred0S (p: package) {p.dst!=0&&(2==1)};pred pred0W (p: package) {p.dst!=0&&(2==1)};chan R0_RS_N_CONT, R0_RS_N_EJCT := Switch(R0_RS_S_IN, pred0N, otherwise);chan R0_RS_N_RBuf := Queue(2, R0_RS_N_CONT)[RS_N_RingBuf];chan R0_RS_N_SBuf := Queue(2, R0_RS_N_EJCT)[RS_N_IntermBuf];chan R0_RS_N_OUT := Merge(R0_RS_N_RBuf, R0_RS_N_INJ);chan R0_RS_E_CONT, R0_RS_E_EJCT := Switch(R0_RS_W_IN, pred0E, otherwise);chan R0_RS_E_RBuf := Queue(2, R0_RS_E_CONT)[RS_E_RingBuf];chan R0_RS_E_SBuf := Queue(2, R0_RS_E_EJCT)[RS_E_IntermBuf];chan R0_RS_E_OUT := Merge(R0_RS_E_RBuf, R0_RS_E_INJ);chan R0_RS_S_CONT, R0_RS_S_EJCT := Switch(R0_RS_N_IN, pred0S, otherwise);chan R0_RS_S_RBuf := Queue(2, R0_RS_S_CONT)[RS_S_RingBuf];chan R0_RS_S_SBuf := Queue(2, R0_RS_S_EJCT)[RS_S_IntermBuf];chan R0_RS_S_OUT := Merge(R0_RS_S_RBuf, R0_RS_S_INJ);chan R0_RS_W_CONT, R0_RS_W_EJCT := Switch(R0_RS_E_IN, pred0W, otherwise);chan R0_RS_W_RBuf := Queue(2, R0_RS_W_CONT)[RS_W_RingBuf];chan R0_RS_W_SBuf := Queue(2, R0_RS_W_EJCT)[RS_W_IntermBuf];chan R0_RS_W_OUT := Merge(R0_RS_W_RBuf, R0_RS_W_INJ);pred NICPred(p:package) {p.dst == 0||p.dst >= 16};chan R0_NIC_filter_drop,R0_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R0_NIC_filter_drop);pred injPred(p:package) {1==1};chan inj_X, inj_Y := Switch(R0_NIC_IN, injPred, otherwise);chan R0_X2Y_OUT := XYSwitch(0, inj_Y, R0_RS_W_SBuf, R0_RS_E_SBuf);pred x2ypred(p:package) {1==2};chan R0_RS_N_INJ, R0_RS_S_INJ := Switch(R0_X2Y_OUT, x2ypred, otherwise);chan R0_Y2X_OUT := XYSwitch(0, inj_X, R0_RS_N_SBuf, R0_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R0_RS_W_INJ, R0_RS_E_INJ := Switch(R0_Y2X_OUT, y2xpred, otherwise);chan R0_RS_N_IN := Vars(R0_IN_N);chan R0_RS_E_IN := Vars(R0_IN_E);chan R0_RS_S_IN := Vars(R0_IN_S);chan R0_RS_W_IN := Vars(R0_IN_W);let R0_OUT_N := Vars(R0_RS_N_OUT);let R0_OUT_E := Vars(R0_RS_E_OUT);let R0_OUT_S := Vars(R0_RS_S_OUT);let R0_OUT_W := Vars(R0_RS_W_OUT);};
macro GridRouter1(chan R1_IN_N, chan R1_IN_E, chan R1_IN_S, chan R1_IN_W) => chan R1_OUT_N, chan R1_OUT_E, chan R1_OUT_S, chan R1_OUT_W {pred pred1N (p: package) {p.dst!=1&&(2==1)};pred pred1E (p: package) {p.dst!=1&&(2==1)};pred pred1S (p: package) {p.dst!=1&&(1==1)};pred pred1W (p: package) {p.dst!=1&&(2==1)};chan R1_RS_N_CONT, R1_RS_N_EJCT := Switch(R1_RS_S_IN, pred1N, otherwise);chan R1_RS_N_RBuf := Queue(2, R1_RS_N_CONT)[RS_N_RingBuf];chan R1_RS_N_SBuf := Queue(2, R1_RS_N_EJCT)[RS_N_IntermBuf];chan R1_RS_N_OUT := Merge(R1_RS_N_RBuf, R1_RS_N_INJ);chan R1_RS_E_CONT, R1_RS_E_EJCT := Switch(R1_RS_W_IN, pred1E, otherwise);chan R1_RS_E_RBuf := Queue(2, R1_RS_E_CONT)[RS_E_RingBuf];chan R1_RS_E_SBuf := Queue(2, R1_RS_E_EJCT)[RS_E_IntermBuf];chan R1_RS_E_OUT := Merge(R1_RS_E_RBuf, R1_RS_E_INJ);chan R1_RS_S_CONT, R1_RS_S_EJCT := Switch(R1_RS_N_IN, pred1S, otherwise);chan R1_RS_S_RBuf := Queue(2, R1_RS_S_CONT)[RS_S_RingBuf];chan R1_RS_S_SBuf := Queue(2, R1_RS_S_EJCT)[RS_S_IntermBuf];chan R1_RS_S_OUT := Merge(R1_RS_S_RBuf, R1_RS_S_INJ);chan R1_RS_W_CONT, R1_RS_W_EJCT := Switch(R1_RS_E_IN, pred1W, otherwise);chan R1_RS_W_RBuf := Queue(2, R1_RS_W_CONT)[RS_W_RingBuf];chan R1_RS_W_SBuf := Queue(2, R1_RS_W_EJCT)[RS_W_IntermBuf];chan R1_RS_W_OUT := Merge(R1_RS_W_RBuf, R1_RS_W_INJ);pred NICPred(p:package) {p.dst == 1||p.dst >= 16};chan R1_NIC_filter_drop,R1_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R1_NIC_filter_drop);pred injPred(p:package) {1==2};chan inj_X, inj_Y := Switch(R1_NIC_IN, injPred, otherwise);chan R1_X2Y_OUT := XYSwitch(1, inj_Y, R1_RS_W_SBuf, R1_RS_E_SBuf);pred x2ypred(p:package) {1==2};chan R1_RS_N_INJ, R1_RS_S_INJ := Switch(R1_X2Y_OUT, x2ypred, otherwise);chan R1_Y2X_OUT := XYSwitch(1, inj_X, R1_RS_N_SBuf, R1_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R1_RS_W_INJ, R1_RS_E_INJ := Switch(R1_Y2X_OUT, y2xpred, otherwise);chan R1_RS_N_IN := Vars(R1_IN_N);chan R1_RS_E_IN := Vars(R1_IN_E);chan R1_RS_S_IN := Vars(R1_IN_S);chan R1_RS_W_IN := Vars(R1_IN_W);let R1_OUT_N := Vars(R1_RS_N_OUT);let R1_OUT_E := Vars(R1_RS_E_OUT);let R1_OUT_S := Vars(R1_RS_S_OUT);let R1_OUT_W := Vars(R1_RS_W_OUT);};
macro GridRouter2(chan R2_IN_N, chan R2_IN_E, chan R2_IN_S, chan R2_IN_W) => chan R2_OUT_N, chan R2_OUT_E, chan R2_OUT_S, chan R2_OUT_W {pred pred2N (p: package) {p.dst!=2&&(2==1)};pred pred2E (p: package) {p.dst!=2&&((p.dst==7||p.dst==6||p.dst==2||p.dst==3))};pred pred2S (p: package) {p.dst!=2&&(2==1)};pred pred2W (p: package) {p.dst!=2&&(2==1)};chan R2_RS_N_CONT, R2_RS_N_EJCT := Switch(R2_RS_S_IN, pred2N, otherwise);chan R2_RS_N_RBuf := Queue(2, R2_RS_N_CONT)[RS_N_RingBuf];chan R2_RS_N_SBuf := Queue(2, R2_RS_N_EJCT)[RS_N_IntermBuf];chan R2_RS_N_OUT := Merge(R2_RS_N_RBuf, R2_RS_N_INJ);chan R2_RS_E_CONT, R2_RS_E_EJCT := Switch(R2_RS_W_IN, pred2E, otherwise);chan R2_RS_E_RBuf := Queue(2, R2_RS_E_CONT)[RS_E_RingBuf];chan R2_RS_E_SBuf := Queue(2, R2_RS_E_EJCT)[RS_E_IntermBuf];chan R2_RS_E_OUT := Merge(R2_RS_E_RBuf, R2_RS_E_INJ);chan R2_RS_S_CONT, R2_RS_S_EJCT := Switch(R2_RS_N_IN, pred2S, otherwise);chan R2_RS_S_RBuf := Queue(2, R2_RS_S_CONT)[RS_S_RingBuf];chan R2_RS_S_SBuf := Queue(2, R2_RS_S_EJCT)[RS_S_IntermBuf];chan R2_RS_S_OUT := Merge(R2_RS_S_RBuf, R2_RS_S_INJ);chan R2_RS_W_CONT, R2_RS_W_EJCT := Switch(R2_RS_E_IN, pred2W, otherwise);chan R2_RS_W_RBuf := Queue(2, R2_RS_W_CONT)[RS_W_RingBuf];chan R2_RS_W_SBuf := Queue(2, R2_RS_W_EJCT)[RS_W_IntermBuf];chan R2_RS_W_OUT := Merge(R2_RS_W_RBuf, R2_RS_W_INJ);pred NICPred(p:package) {p.dst == 2||p.dst >= 16};chan R2_NIC_filter_drop,R2_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R2_NIC_filter_drop);pred injPred(p:package) {1==1};chan inj_X, inj_Y := Switch(R2_NIC_IN, injPred, otherwise);chan R2_X2Y_OUT := XYSwitch(2, inj_Y, R2_RS_W_SBuf, R2_RS_E_SBuf);pred x2ypred(p:package) {1==2};chan R2_RS_N_INJ, R2_RS_S_INJ := Switch(R2_X2Y_OUT, x2ypred, otherwise);chan R2_Y2X_OUT := XYSwitch(2, inj_X, R2_RS_N_SBuf, R2_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R2_RS_W_INJ, R2_RS_E_INJ := Switch(R2_Y2X_OUT, y2xpred, otherwise);chan R2_RS_N_IN := Vars(R2_IN_N);chan R2_RS_E_IN := Vars(R2_IN_E);chan R2_RS_S_IN := Vars(R2_IN_S);chan R2_RS_W_IN := Vars(R2_IN_W);let R2_OUT_N := Vars(R2_RS_N_OUT);let R2_OUT_E := Vars(R2_RS_E_OUT);let R2_OUT_S := Vars(R2_RS_S_OUT);let R2_OUT_W := Vars(R2_RS_W_OUT);};
macro GridRouter3(chan R3_IN_N, chan R3_IN_E, chan R3_IN_S, chan R3_IN_W) => chan R3_OUT_N, chan R3_OUT_E, chan R3_OUT_S, chan R3_OUT_W {pred pred3N (p: package) {p.dst!=3&&(2==1)};pred pred3E (p: package) {p.dst!=3&&(2==1)};pred pred3S (p: package) {p.dst!=3&&(1==1)};pred pred3W (p: package) {p.dst!=3&&(2==1)};chan R3_RS_N_CONT, R3_RS_N_EJCT := Switch(R3_RS_S_IN, pred3N, otherwise);chan R3_RS_N_RBuf := Queue(2, R3_RS_N_CONT)[RS_N_RingBuf];chan R3_RS_N_SBuf := Queue(2, R3_RS_N_EJCT)[RS_N_IntermBuf];chan R3_RS_N_OUT := Merge(R3_RS_N_RBuf, R3_RS_N_INJ);chan R3_RS_E_CONT, R3_RS_E_EJCT := Switch(R3_RS_W_IN, pred3E, otherwise);chan R3_RS_E_RBuf := Queue(2, R3_RS_E_CONT)[RS_E_RingBuf];chan R3_RS_E_SBuf := Queue(2, R3_RS_E_EJCT)[RS_E_IntermBuf];chan R3_RS_E_OUT := Merge(R3_RS_E_RBuf, R3_RS_E_INJ);chan R3_RS_S_CONT, R3_RS_S_EJCT := Switch(R3_RS_N_IN, pred3S, otherwise);chan R3_RS_S_RBuf := Queue(2, R3_RS_S_CONT)[RS_S_RingBuf];chan R3_RS_S_SBuf := Queue(2, R3_RS_S_EJCT)[RS_S_IntermBuf];chan R3_RS_S_OUT := Merge(R3_RS_S_RBuf, R3_RS_S_INJ);chan R3_RS_W_CONT, R3_RS_W_EJCT := Switch(R3_RS_E_IN, pred3W, otherwise);chan R3_RS_W_RBuf := Queue(2, R3_RS_W_CONT)[RS_W_RingBuf];chan R3_RS_W_SBuf := Queue(2, R3_RS_W_EJCT)[RS_W_IntermBuf];chan R3_RS_W_OUT := Merge(R3_RS_W_RBuf, R3_RS_W_INJ);pred NICPred(p:package) {p.dst == 3||p.dst >= 16};chan R3_NIC_filter_drop,R3_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R3_NIC_filter_drop);pred injPred(p:package) {1==2};chan inj_X, inj_Y := Switch(R3_NIC_IN, injPred, otherwise);chan R3_X2Y_OUT := XYSwitch(3, inj_Y, R3_RS_W_SBuf, R3_RS_E_SBuf);pred x2ypred(p:package) {1==2};chan R3_RS_N_INJ, R3_RS_S_INJ := Switch(R3_X2Y_OUT, x2ypred, otherwise);chan R3_Y2X_OUT := XYSwitch(3, inj_X, R3_RS_N_SBuf, R3_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R3_RS_W_INJ, R3_RS_E_INJ := Switch(R3_Y2X_OUT, y2xpred, otherwise);chan R3_RS_N_IN := Vars(R3_IN_N);chan R3_RS_E_IN := Vars(R3_IN_E);chan R3_RS_S_IN := Vars(R3_IN_S);chan R3_RS_W_IN := Vars(R3_IN_W);let R3_OUT_N := Vars(R3_RS_N_OUT);let R3_OUT_E := Vars(R3_RS_E_OUT);let R3_OUT_S := Vars(R3_RS_S_OUT);let R3_OUT_W := Vars(R3_RS_W_OUT);};
macro GridRouter4(chan R4_IN_N, chan R4_IN_E, chan R4_IN_S, chan R4_IN_W) => chan R4_OUT_N, chan R4_OUT_E, chan R4_OUT_S, chan R4_OUT_W {pred pred4N (p: package) {p.dst!=4&&(1==1)};pred pred4E (p: package) {p.dst!=4&&(2==1)};pred pred4S (p: package) {p.dst!=4&&(2==1)};pred pred4W (p: package) {p.dst!=4&&(2==1)};chan R4_RS_N_CONT, R4_RS_N_EJCT := Switch(R4_RS_S_IN, pred4N, otherwise);chan R4_RS_N_RBuf := Queue(2, R4_RS_N_CONT)[RS_N_RingBuf];chan R4_RS_N_SBuf := Queue(2, R4_RS_N_EJCT)[RS_N_IntermBuf];chan R4_RS_N_OUT := Merge(R4_RS_N_RBuf, R4_RS_N_INJ);chan R4_RS_E_CONT, R4_RS_E_EJCT := Switch(R4_RS_W_IN, pred4E, otherwise);chan R4_RS_E_RBuf := Queue(2, R4_RS_E_CONT)[RS_E_RingBuf];chan R4_RS_E_SBuf := Queue(2, R4_RS_E_EJCT)[RS_E_IntermBuf];chan R4_RS_E_OUT := Merge(R4_RS_E_RBuf, R4_RS_E_INJ);chan R4_RS_S_CONT, R4_RS_S_EJCT := Switch(R4_RS_N_IN, pred4S, otherwise);chan R4_RS_S_RBuf := Queue(2, R4_RS_S_CONT)[RS_S_RingBuf];chan R4_RS_S_SBuf := Queue(2, R4_RS_S_EJCT)[RS_S_IntermBuf];chan R4_RS_S_OUT := Merge(R4_RS_S_RBuf, R4_RS_S_INJ);chan R4_RS_W_CONT, R4_RS_W_EJCT := Switch(R4_RS_E_IN, pred4W, otherwise);chan R4_RS_W_RBuf := Queue(2, R4_RS_W_CONT)[RS_W_RingBuf];chan R4_RS_W_SBuf := Queue(2, R4_RS_W_EJCT)[RS_W_IntermBuf];chan R4_RS_W_OUT := Merge(R4_RS_W_RBuf, R4_RS_W_INJ);pred NICPred(p:package) {p.dst == 4||p.dst >= 16};chan R4_NIC_filter_drop,R4_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R4_NIC_filter_drop);pred injPred(p:package) {1==2};chan inj_X, inj_Y := Switch(R4_NIC_IN, injPred, otherwise);chan R4_X2Y_OUT := XYSwitch(4, inj_Y, R4_RS_W_SBuf, R4_RS_E_SBuf);pred x2ypred(p:package) {1==1};chan R4_RS_N_INJ, R4_RS_S_INJ := Switch(R4_X2Y_OUT, x2ypred, otherwise);chan R4_Y2X_OUT := XYSwitch(4, inj_X, R4_RS_N_SBuf, R4_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R4_RS_W_INJ, R4_RS_E_INJ := Switch(R4_Y2X_OUT, y2xpred, otherwise);chan R4_RS_N_IN := Vars(R4_IN_N);chan R4_RS_E_IN := Vars(R4_IN_E);chan R4_RS_S_IN := Vars(R4_IN_S);chan R4_RS_W_IN := Vars(R4_IN_W);let R4_OUT_N := Vars(R4_RS_N_OUT);let R4_OUT_E := Vars(R4_RS_E_OUT);let R4_OUT_S := Vars(R4_RS_S_OUT);let R4_OUT_W := Vars(R4_RS_W_OUT);};
macro GridRouter5(chan R5_IN_N, chan R5_IN_E, chan R5_IN_S, chan R5_IN_W) => chan R5_OUT_N, chan R5_OUT_E, chan R5_OUT_S, chan R5_OUT_W {pred pred5N (p: package) {p.dst!=5&&(2==1)};pred pred5E (p: package) {p.dst!=5&&((p.dst==5||p.dst==4||p.dst==0||p.dst==1))};pred pred5S (p: package) {p.dst!=5&&((!(p.dst==5||p.dst==4||p.dst==0||p.dst==1)))};pred pred5W (p: package) {p.dst!=5&&((p.dst==5||p.dst==4||p.dst==0||p.dst==1))};chan R5_RS_N_CONT, R5_RS_N_EJCT := Switch(R5_RS_S_IN, pred5N, otherwise);chan R5_RS_N_RBuf := Queue(2, R5_RS_N_CONT)[RS_N_RingBuf];chan R5_RS_N_SBuf := Queue(2, R5_RS_N_EJCT)[RS_N_IntermBuf];chan R5_RS_N_OUT := Merge(R5_RS_N_RBuf, R5_RS_N_INJ);chan R5_RS_E_CONT, R5_RS_E_EJCT := Switch(R5_RS_W_IN, pred5E, otherwise);chan R5_RS_E_RBuf := Queue(2, R5_RS_E_CONT)[RS_E_RingBuf];chan R5_RS_E_SBuf := Queue(2, R5_RS_E_EJCT)[RS_E_IntermBuf];chan R5_RS_E_OUT := Merge(R5_RS_E_RBuf, R5_RS_E_INJ);chan R5_RS_S_CONT, R5_RS_S_EJCT := Switch(R5_RS_N_IN, pred5S, otherwise);chan R5_RS_S_RBuf := Queue(2, R5_RS_S_CONT)[RS_S_RingBuf];chan R5_RS_S_SBuf := Queue(2, R5_RS_S_EJCT)[RS_S_IntermBuf];chan R5_RS_S_OUT := Merge(R5_RS_S_RBuf, R5_RS_S_INJ);chan R5_RS_W_CONT, R5_RS_W_EJCT := Switch(R5_RS_E_IN, pred5W, otherwise);chan R5_RS_W_RBuf := Queue(2, R5_RS_W_CONT)[RS_W_RingBuf];chan R5_RS_W_SBuf := Queue(2, R5_RS_W_EJCT)[RS_W_IntermBuf];chan R5_RS_W_OUT := Merge(R5_RS_W_RBuf, R5_RS_W_INJ);pred NICPred(p:package) {p.dst == 5||p.dst >= 16};chan R5_NIC_filter_drop,R5_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R5_NIC_filter_drop);pred injPred(p:package) {(p.dst==5||p.dst==4||p.dst==0||p.dst==1)};chan inj_X, inj_Y := Switch(R5_NIC_IN, injPred, otherwise);chan R5_X2Y_OUT := XYSwitch(5, inj_Y, R5_RS_W_SBuf, R5_RS_E_SBuf);pred x2ypred(p:package) {1==2};chan R5_RS_N_INJ, R5_RS_S_INJ := Switch(R5_X2Y_OUT, x2ypred, otherwise);chan R5_Y2X_OUT := XYSwitch(5, inj_X, R5_RS_N_SBuf, R5_RS_S_SBuf);pred y2xpred(p:package) {(p.dst==5||p.dst==4||p.dst==0||p.dst==1)};chan R5_RS_W_INJ, R5_RS_E_INJ := Switch(R5_Y2X_OUT, y2xpred, otherwise);chan R5_RS_N_IN := Vars(R5_IN_N);chan R5_RS_E_IN := Vars(R5_IN_E);chan R5_RS_S_IN := Vars(R5_IN_S);chan R5_RS_W_IN := Vars(R5_IN_W);let R5_OUT_N := Vars(R5_RS_N_OUT);let R5_OUT_E := Vars(R5_RS_E_OUT);let R5_OUT_S := Vars(R5_RS_S_OUT);let R5_OUT_W := Vars(R5_RS_W_OUT);};
macro GridRouter6(chan R6_IN_N, chan R6_IN_E, chan R6_IN_S, chan R6_IN_W) => chan R6_OUT_N, chan R6_OUT_E, chan R6_OUT_S, chan R6_OUT_W {pred pred6N (p: package) {p.dst!=6&&(1==1)};pred pred6E (p: package) {p.dst!=6&&((!(p.dst==7||p.dst==6||p.dst==2||p.dst==3)))};pred pred6S (p: package) {p.dst!=6&&(2==1)};pred pred6W (p: package) {p.dst!=6&&((!(p.dst==7||p.dst==6||p.dst==2||p.dst==3)))};chan R6_RS_N_CONT, R6_RS_N_EJCT := Switch(R6_RS_S_IN, pred6N, otherwise);chan R6_RS_N_RBuf := Queue(2, R6_RS_N_CONT)[RS_N_RingBuf];chan R6_RS_N_SBuf := Queue(2, R6_RS_N_EJCT)[RS_N_IntermBuf];chan R6_RS_N_OUT := Merge(R6_RS_N_RBuf, R6_RS_N_INJ);chan R6_RS_E_CONT, R6_RS_E_EJCT := Switch(R6_RS_W_IN, pred6E, otherwise);chan R6_RS_E_RBuf := Queue(2, R6_RS_E_CONT)[RS_E_RingBuf];chan R6_RS_E_SBuf := Queue(2, R6_RS_E_EJCT)[RS_E_IntermBuf];chan R6_RS_E_OUT := Merge(R6_RS_E_RBuf, R6_RS_E_INJ);chan R6_RS_S_CONT, R6_RS_S_EJCT := Switch(R6_RS_N_IN, pred6S, otherwise);chan R6_RS_S_RBuf := Queue(2, R6_RS_S_CONT)[RS_S_RingBuf];chan R6_RS_S_SBuf := Queue(2, R6_RS_S_EJCT)[RS_S_IntermBuf];chan R6_RS_S_OUT := Merge(R6_RS_S_RBuf, R6_RS_S_INJ);chan R6_RS_W_CONT, R6_RS_W_EJCT := Switch(R6_RS_E_IN, pred6W, otherwise);chan R6_RS_W_RBuf := Queue(2, R6_RS_W_CONT)[RS_W_RingBuf];chan R6_RS_W_SBuf := Queue(2, R6_RS_W_EJCT)[RS_W_IntermBuf];chan R6_RS_W_OUT := Merge(R6_RS_W_RBuf, R6_RS_W_INJ);pred NICPred(p:package) {p.dst == 6||p.dst >= 16};chan R6_NIC_filter_drop,R6_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R6_NIC_filter_drop);pred injPred(p:package) {(!(p.dst==7||p.dst==6||p.dst==2||p.dst==3))};chan inj_X, inj_Y := Switch(R6_NIC_IN, injPred, otherwise);chan R6_X2Y_OUT := XYSwitch(6, inj_Y, R6_RS_W_SBuf, R6_RS_E_SBuf);pred x2ypred(p:package) {1==1};chan R6_RS_N_INJ, R6_RS_S_INJ := Switch(R6_X2Y_OUT, x2ypred, otherwise);chan R6_Y2X_OUT := XYSwitch(6, inj_X, R6_RS_N_SBuf, R6_RS_S_SBuf);pred y2xpred(p:package) {p.dst % 4 < 6 % 4};chan R6_RS_W_INJ, R6_RS_E_INJ := Switch(R6_Y2X_OUT, y2xpred, otherwise);chan R6_RS_N_IN := Vars(R6_IN_N);chan R6_RS_E_IN := Vars(R6_IN_E);chan R6_RS_S_IN := Vars(R6_IN_S);chan R6_RS_W_IN := Vars(R6_IN_W);let R6_OUT_N := Vars(R6_RS_N_OUT);let R6_OUT_E := Vars(R6_RS_E_OUT);let R6_OUT_S := Vars(R6_RS_S_OUT);let R6_OUT_W := Vars(R6_RS_W_OUT);};
macro GridRouter7(chan R7_IN_N, chan R7_IN_E, chan R7_IN_S, chan R7_IN_W) => chan R7_OUT_N, chan R7_OUT_E, chan R7_OUT_S, chan R7_OUT_W {pred pred7N (p: package) {p.dst!=7&&(2==1)};pred pred7E (p: package) {p.dst!=7&&(2==1)};pred pred7S (p: package) {p.dst!=7&&((!(p.dst==7||p.dst==6||p.dst==2||p.dst==3)))};pred pred7W (p: package) {p.dst!=7&&((p.dst==7||p.dst==6||p.dst==2||p.dst==3))};chan R7_RS_N_CONT, R7_RS_N_EJCT := Switch(R7_RS_S_IN, pred7N, otherwise);chan R7_RS_N_RBuf := Queue(2, R7_RS_N_CONT)[RS_N_RingBuf];chan R7_RS_N_SBuf := Queue(2, R7_RS_N_EJCT)[RS_N_IntermBuf];chan R7_RS_N_OUT := Merge(R7_RS_N_RBuf, R7_RS_N_INJ);chan R7_RS_E_CONT, R7_RS_E_EJCT := Switch(R7_RS_W_IN, pred7E, otherwise);chan R7_RS_E_RBuf := Queue(2, R7_RS_E_CONT)[RS_E_RingBuf];chan R7_RS_E_SBuf := Queue(2, R7_RS_E_EJCT)[RS_E_IntermBuf];chan R7_RS_E_OUT := Merge(R7_RS_E_RBuf, R7_RS_E_INJ);chan R7_RS_S_CONT, R7_RS_S_EJCT := Switch(R7_RS_N_IN, pred7S, otherwise);chan R7_RS_S_RBuf := Queue(2, R7_RS_S_CONT)[RS_S_RingBuf];chan R7_RS_S_SBuf := Queue(2, R7_RS_S_EJCT)[RS_S_IntermBuf];chan R7_RS_S_OUT := Merge(R7_RS_S_RBuf, R7_RS_S_INJ);chan R7_RS_W_CONT, R7_RS_W_EJCT := Switch(R7_RS_E_IN, pred7W, otherwise);chan R7_RS_W_RBuf := Queue(2, R7_RS_W_CONT)[RS_W_RingBuf];chan R7_RS_W_SBuf := Queue(2, R7_RS_W_EJCT)[RS_W_IntermBuf];chan R7_RS_W_OUT := Merge(R7_RS_W_RBuf, R7_RS_W_INJ);pred NICPred(p:package) {p.dst == 7||p.dst >= 16};chan R7_NIC_filter_drop,R7_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R7_NIC_filter_drop);pred injPred(p:package) {(p.dst==7||p.dst==6||p.dst==2||p.dst==3)};chan inj_X, inj_Y := Switch(R7_NIC_IN, injPred, otherwise);chan R7_X2Y_OUT := XYSwitch(7, inj_Y, R7_RS_W_SBuf, R7_RS_E_SBuf);pred x2ypred(p:package) {1==2};chan R7_RS_N_INJ, R7_RS_S_INJ := Switch(R7_X2Y_OUT, x2ypred, otherwise);chan R7_Y2X_OUT := XYSwitch(7, inj_X, R7_RS_N_SBuf, R7_RS_S_SBuf);pred y2xpred(p:package) {1==1};chan R7_RS_W_INJ, R7_RS_E_INJ := Switch(R7_Y2X_OUT, y2xpred, otherwise);chan R7_RS_N_IN := Vars(R7_IN_N);chan R7_RS_E_IN := Vars(R7_IN_E);chan R7_RS_S_IN := Vars(R7_IN_S);chan R7_RS_W_IN := Vars(R7_IN_W);let R7_OUT_N := Vars(R7_RS_N_OUT);let R7_OUT_E := Vars(R7_RS_E_OUT);let R7_OUT_S := Vars(R7_RS_S_OUT);let R7_OUT_W := Vars(R7_RS_W_OUT);};
macro GridRouter8(chan R8_IN_N, chan R8_IN_E, chan R8_IN_S, chan R8_IN_W) => chan R8_OUT_N, chan R8_OUT_E, chan R8_OUT_S, chan R8_OUT_W {pred pred8N (p: package) {p.dst!=8&&(2==1)};pred pred8E (p: package) {p.dst!=8&&((p.dst==13||p.dst==12||p.dst==8||p.dst==9))};pred pred8S (p: package) {p.dst!=8&&(2==1)};pred pred8W (p: package) {p.dst!=8&&(2==1)};chan R8_RS_N_CONT, R8_RS_N_EJCT := Switch(R8_RS_S_IN, pred8N, otherwise);chan R8_RS_N_RBuf := Queue(2, R8_RS_N_CONT)[RS_N_RingBuf];chan R8_RS_N_SBuf := Queue(2, R8_RS_N_EJCT)[RS_N_IntermBuf];chan R8_RS_N_OUT := Merge(R8_RS_N_RBuf, R8_RS_N_INJ);chan R8_RS_E_CONT, R8_RS_E_EJCT := Switch(R8_RS_W_IN, pred8E, otherwise);chan R8_RS_E_RBuf := Queue(2, R8_RS_E_CONT)[RS_E_RingBuf];chan R8_RS_E_SBuf := Queue(2, R8_RS_E_EJCT)[RS_E_IntermBuf];chan R8_RS_E_OUT := Merge(R8_RS_E_RBuf, R8_RS_E_INJ);chan R8_RS_S_CONT, R8_RS_S_EJCT := Switch(R8_RS_N_IN, pred8S, otherwise);chan R8_RS_S_RBuf := Queue(2, R8_RS_S_CONT)[RS_S_RingBuf];chan R8_RS_S_SBuf := Queue(2, R8_RS_S_EJCT)[RS_S_IntermBuf];chan R8_RS_S_OUT := Merge(R8_RS_S_RBuf, R8_RS_S_INJ);chan R8_RS_W_CONT, R8_RS_W_EJCT := Switch(R8_RS_E_IN, pred8W, otherwise);chan R8_RS_W_RBuf := Queue(2, R8_RS_W_CONT)[RS_W_RingBuf];chan R8_RS_W_SBuf := Queue(2, R8_RS_W_EJCT)[RS_W_IntermBuf];chan R8_RS_W_OUT := Merge(R8_RS_W_RBuf, R8_RS_W_INJ);pred NICPred(p:package) {p.dst == 8||p.dst >= 16};chan R8_NIC_filter_drop,R8_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R8_NIC_filter_drop);pred injPred(p:package) {1==1};chan inj_X, inj_Y := Switch(R8_NIC_IN, injPred, otherwise);chan R8_X2Y_OUT := XYSwitch(8, inj_Y, R8_RS_W_SBuf, R8_RS_E_SBuf);pred x2ypred(p:package) {1==2};chan R8_RS_N_INJ, R8_RS_S_INJ := Switch(R8_X2Y_OUT, x2ypred, otherwise);chan R8_Y2X_OUT := XYSwitch(8, inj_X, R8_RS_N_SBuf, R8_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R8_RS_W_INJ, R8_RS_E_INJ := Switch(R8_Y2X_OUT, y2xpred, otherwise);chan R8_RS_N_IN := Vars(R8_IN_N);chan R8_RS_E_IN := Vars(R8_IN_E);chan R8_RS_S_IN := Vars(R8_IN_S);chan R8_RS_W_IN := Vars(R8_IN_W);let R8_OUT_N := Vars(R8_RS_N_OUT);let R8_OUT_E := Vars(R8_RS_E_OUT);let R8_OUT_S := Vars(R8_RS_S_OUT);let R8_OUT_W := Vars(R8_RS_W_OUT);};
macro GridRouter9(chan R9_IN_N, chan R9_IN_E, chan R9_IN_S, chan R9_IN_W) => chan R9_OUT_N, chan R9_OUT_E, chan R9_OUT_S, chan R9_OUT_W {pred pred9N (p: package) {p.dst!=9&&(1==1)};pred pred9E (p: package) {p.dst!=9&&(2==1)};pred pred9S (p: package) {p.dst!=9&&(1==1)};pred pred9W (p: package) {p.dst!=9&&(2==1)};chan R9_RS_N_CONT, R9_RS_N_EJCT := Switch(R9_RS_S_IN, pred9N, otherwise);chan R9_RS_N_RBuf := Queue(2, R9_RS_N_CONT)[RS_N_RingBuf];chan R9_RS_N_SBuf := Queue(2, R9_RS_N_EJCT)[RS_N_IntermBuf];chan R9_RS_N_OUT := Merge(R9_RS_N_RBuf, R9_RS_N_INJ);chan R9_RS_E_CONT, R9_RS_E_EJCT := Switch(R9_RS_W_IN, pred9E, otherwise);chan R9_RS_E_RBuf := Queue(2, R9_RS_E_CONT)[RS_E_RingBuf];chan R9_RS_E_SBuf := Queue(2, R9_RS_E_EJCT)[RS_E_IntermBuf];chan R9_RS_E_OUT := Merge(R9_RS_E_RBuf, R9_RS_E_INJ);chan R9_RS_S_CONT, R9_RS_S_EJCT := Switch(R9_RS_N_IN, pred9S, otherwise);chan R9_RS_S_RBuf := Queue(2, R9_RS_S_CONT)[RS_S_RingBuf];chan R9_RS_S_SBuf := Queue(2, R9_RS_S_EJCT)[RS_S_IntermBuf];chan R9_RS_S_OUT := Merge(R9_RS_S_RBuf, R9_RS_S_INJ);chan R9_RS_W_CONT, R9_RS_W_EJCT := Switch(R9_RS_E_IN, pred9W, otherwise);chan R9_RS_W_RBuf := Queue(2, R9_RS_W_CONT)[RS_W_RingBuf];chan R9_RS_W_SBuf := Queue(2, R9_RS_W_EJCT)[RS_W_IntermBuf];chan R9_RS_W_OUT := Merge(R9_RS_W_RBuf, R9_RS_W_INJ);pred NICPred(p:package) {p.dst == 9||p.dst >= 16};chan R9_NIC_filter_drop,R9_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R9_NIC_filter_drop);pred injPred(p:package) {1==2};chan inj_X, inj_Y := Switch(R9_NIC_IN, injPred, otherwise);chan R9_X2Y_OUT := XYSwitch(9, inj_Y, R9_RS_W_SBuf, R9_RS_E_SBuf);pred x2ypred(p:package) {p.dst < 9};chan R9_RS_N_INJ, R9_RS_S_INJ := Switch(R9_X2Y_OUT, x2ypred, otherwise);chan R9_Y2X_OUT := XYSwitch(9, inj_X, R9_RS_N_SBuf, R9_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R9_RS_W_INJ, R9_RS_E_INJ := Switch(R9_Y2X_OUT, y2xpred, otherwise);chan R9_RS_N_IN := Vars(R9_IN_N);chan R9_RS_E_IN := Vars(R9_IN_E);chan R9_RS_S_IN := Vars(R9_IN_S);chan R9_RS_W_IN := Vars(R9_IN_W);let R9_OUT_N := Vars(R9_RS_N_OUT);let R9_OUT_E := Vars(R9_RS_E_OUT);let R9_OUT_S := Vars(R9_RS_S_OUT);let R9_OUT_W := Vars(R9_RS_W_OUT);};
macro GridRouter10(chan R10_IN_N, chan R10_IN_E, chan R10_IN_S, chan R10_IN_W) => chan R10_OUT_N, chan R10_OUT_E, chan R10_OUT_S, chan R10_OUT_W {pred pred10N (p: package) {p.dst!=10&&(2==1)};pred pred10E (p: package) {p.dst!=10&&((p.dst==15||p.dst==14||p.dst==10||p.dst==11))};pred pred10S (p: package) {p.dst!=10&&(2==1)};pred pred10W (p: package) {p.dst!=10&&(2==1)};chan R10_RS_N_CONT, R10_RS_N_EJCT := Switch(R10_RS_S_IN, pred10N, otherwise);chan R10_RS_N_RBuf := Queue(2, R10_RS_N_CONT)[RS_N_RingBuf];chan R10_RS_N_SBuf := Queue(2, R10_RS_N_EJCT)[RS_N_IntermBuf];chan R10_RS_N_OUT := Merge(R10_RS_N_RBuf, R10_RS_N_INJ);chan R10_RS_E_CONT, R10_RS_E_EJCT := Switch(R10_RS_W_IN, pred10E, otherwise);chan R10_RS_E_RBuf := Queue(2, R10_RS_E_CONT)[RS_E_RingBuf];chan R10_RS_E_SBuf := Queue(2, R10_RS_E_EJCT)[RS_E_IntermBuf];chan R10_RS_E_OUT := Merge(R10_RS_E_RBuf, R10_RS_E_INJ);chan R10_RS_S_CONT, R10_RS_S_EJCT := Switch(R10_RS_N_IN, pred10S, otherwise);chan R10_RS_S_RBuf := Queue(2, R10_RS_S_CONT)[RS_S_RingBuf];chan R10_RS_S_SBuf := Queue(2, R10_RS_S_EJCT)[RS_S_IntermBuf];chan R10_RS_S_OUT := Merge(R10_RS_S_RBuf, R10_RS_S_INJ);chan R10_RS_W_CONT, R10_RS_W_EJCT := Switch(R10_RS_E_IN, pred10W, otherwise);chan R10_RS_W_RBuf := Queue(2, R10_RS_W_CONT)[RS_W_RingBuf];chan R10_RS_W_SBuf := Queue(2, R10_RS_W_EJCT)[RS_W_IntermBuf];chan R10_RS_W_OUT := Merge(R10_RS_W_RBuf, R10_RS_W_INJ);pred NICPred(p:package) {p.dst == 10||p.dst >= 16};chan R10_NIC_filter_drop,R10_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R10_NIC_filter_drop);pred injPred(p:package) {1==1};chan inj_X, inj_Y := Switch(R10_NIC_IN, injPred, otherwise);chan R10_X2Y_OUT := XYSwitch(10, inj_Y, R10_RS_W_SBuf, R10_RS_E_SBuf);pred x2ypred(p:package) {1==2};chan R10_RS_N_INJ, R10_RS_S_INJ := Switch(R10_X2Y_OUT, x2ypred, otherwise);chan R10_Y2X_OUT := XYSwitch(10, inj_X, R10_RS_N_SBuf, R10_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R10_RS_W_INJ, R10_RS_E_INJ := Switch(R10_Y2X_OUT, y2xpred, otherwise);chan R10_RS_N_IN := Vars(R10_IN_N);chan R10_RS_E_IN := Vars(R10_IN_E);chan R10_RS_S_IN := Vars(R10_IN_S);chan R10_RS_W_IN := Vars(R10_IN_W);let R10_OUT_N := Vars(R10_RS_N_OUT);let R10_OUT_E := Vars(R10_RS_E_OUT);let R10_OUT_S := Vars(R10_RS_S_OUT);let R10_OUT_W := Vars(R10_RS_W_OUT);};
macro GridRouter11(chan R11_IN_N, chan R11_IN_E, chan R11_IN_S, chan R11_IN_W) => chan R11_OUT_N, chan R11_OUT_E, chan R11_OUT_S, chan R11_OUT_W {pred pred11N (p: package) {p.dst!=11&&(1==1)};pred pred11E (p: package) {p.dst!=11&&(2==1)};pred pred11S (p: package) {p.dst!=11&&(1==1)};pred pred11W (p: package) {p.dst!=11&&(2==1)};chan R11_RS_N_CONT, R11_RS_N_EJCT := Switch(R11_RS_S_IN, pred11N, otherwise);chan R11_RS_N_RBuf := Queue(2, R11_RS_N_CONT)[RS_N_RingBuf];chan R11_RS_N_SBuf := Queue(2, R11_RS_N_EJCT)[RS_N_IntermBuf];chan R11_RS_N_OUT := Merge(R11_RS_N_RBuf, R11_RS_N_INJ);chan R11_RS_E_CONT, R11_RS_E_EJCT := Switch(R11_RS_W_IN, pred11E, otherwise);chan R11_RS_E_RBuf := Queue(2, R11_RS_E_CONT)[RS_E_RingBuf];chan R11_RS_E_SBuf := Queue(2, R11_RS_E_EJCT)[RS_E_IntermBuf];chan R11_RS_E_OUT := Merge(R11_RS_E_RBuf, R11_RS_E_INJ);chan R11_RS_S_CONT, R11_RS_S_EJCT := Switch(R11_RS_N_IN, pred11S, otherwise);chan R11_RS_S_RBuf := Queue(2, R11_RS_S_CONT)[RS_S_RingBuf];chan R11_RS_S_SBuf := Queue(2, R11_RS_S_EJCT)[RS_S_IntermBuf];chan R11_RS_S_OUT := Merge(R11_RS_S_RBuf, R11_RS_S_INJ);chan R11_RS_W_CONT, R11_RS_W_EJCT := Switch(R11_RS_E_IN, pred11W, otherwise);chan R11_RS_W_RBuf := Queue(2, R11_RS_W_CONT)[RS_W_RingBuf];chan R11_RS_W_SBuf := Queue(2, R11_RS_W_EJCT)[RS_W_IntermBuf];chan R11_RS_W_OUT := Merge(R11_RS_W_RBuf, R11_RS_W_INJ);pred NICPred(p:package) {p.dst == 11||p.dst >= 16};chan R11_NIC_filter_drop,R11_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R11_NIC_filter_drop);pred injPred(p:package) {1==2};chan inj_X, inj_Y := Switch(R11_NIC_IN, injPred, otherwise);chan R11_X2Y_OUT := XYSwitch(11, inj_Y, R11_RS_W_SBuf, R11_RS_E_SBuf);pred x2ypred(p:package) {p.dst < 11};chan R11_RS_N_INJ, R11_RS_S_INJ := Switch(R11_X2Y_OUT, x2ypred, otherwise);chan R11_Y2X_OUT := XYSwitch(11, inj_X, R11_RS_N_SBuf, R11_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R11_RS_W_INJ, R11_RS_E_INJ := Switch(R11_Y2X_OUT, y2xpred, otherwise);chan R11_RS_N_IN := Vars(R11_IN_N);chan R11_RS_E_IN := Vars(R11_IN_E);chan R11_RS_S_IN := Vars(R11_IN_S);chan R11_RS_W_IN := Vars(R11_IN_W);let R11_OUT_N := Vars(R11_RS_N_OUT);let R11_OUT_E := Vars(R11_RS_E_OUT);let R11_OUT_S := Vars(R11_RS_S_OUT);let R11_OUT_W := Vars(R11_RS_W_OUT);};
macro GridRouter12(chan R12_IN_N, chan R12_IN_E, chan R12_IN_S, chan R12_IN_W) => chan R12_OUT_N, chan R12_OUT_E, chan R12_OUT_S, chan R12_OUT_W {pred pred12N (p: package) {p.dst!=12&&(1==1)};pred pred12E (p: package) {p.dst!=12&&(2==1)};pred pred12S (p: package) {p.dst!=12&&(2==1)};pred pred12W (p: package) {p.dst!=12&&(2==1)};chan R12_RS_N_CONT, R12_RS_N_EJCT := Switch(R12_RS_S_IN, pred12N, otherwise);chan R12_RS_N_RBuf := Queue(2, R12_RS_N_CONT)[RS_N_RingBuf];chan R12_RS_N_SBuf := Queue(2, R12_RS_N_EJCT)[RS_N_IntermBuf];chan R12_RS_N_OUT := Merge(R12_RS_N_RBuf, R12_RS_N_INJ);chan R12_RS_E_CONT, R12_RS_E_EJCT := Switch(R12_RS_W_IN, pred12E, otherwise);chan R12_RS_E_RBuf := Queue(2, R12_RS_E_CONT)[RS_E_RingBuf];chan R12_RS_E_SBuf := Queue(2, R12_RS_E_EJCT)[RS_E_IntermBuf];chan R12_RS_E_OUT := Merge(R12_RS_E_RBuf, R12_RS_E_INJ);chan R12_RS_S_CONT, R12_RS_S_EJCT := Switch(R12_RS_N_IN, pred12S, otherwise);chan R12_RS_S_RBuf := Queue(2, R12_RS_S_CONT)[RS_S_RingBuf];chan R12_RS_S_SBuf := Queue(2, R12_RS_S_EJCT)[RS_S_IntermBuf];chan R12_RS_S_OUT := Merge(R12_RS_S_RBuf, R12_RS_S_INJ);chan R12_RS_W_CONT, R12_RS_W_EJCT := Switch(R12_RS_E_IN, pred12W, otherwise);chan R12_RS_W_RBuf := Queue(2, R12_RS_W_CONT)[RS_W_RingBuf];chan R12_RS_W_SBuf := Queue(2, R12_RS_W_EJCT)[RS_W_IntermBuf];chan R12_RS_W_OUT := Merge(R12_RS_W_RBuf, R12_RS_W_INJ);pred NICPred(p:package) {p.dst == 12||p.dst >= 16};chan R12_NIC_filter_drop,R12_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R12_NIC_filter_drop);pred injPred(p:package) {1==2};chan inj_X, inj_Y := Switch(R12_NIC_IN, injPred, otherwise);chan R12_X2Y_OUT := XYSwitch(12, inj_Y, R12_RS_W_SBuf, R12_RS_E_SBuf);pred x2ypred(p:package) {1==1};chan R12_RS_N_INJ, R12_RS_S_INJ := Switch(R12_X2Y_OUT, x2ypred, otherwise);chan R12_Y2X_OUT := XYSwitch(12, inj_X, R12_RS_N_SBuf, R12_RS_S_SBuf);pred y2xpred(p:package) {1==2};chan R12_RS_W_INJ, R12_RS_E_INJ := Switch(R12_Y2X_OUT, y2xpred, otherwise);chan R12_RS_N_IN := Vars(R12_IN_N);chan R12_RS_E_IN := Vars(R12_IN_E);chan R12_RS_S_IN := Vars(R12_IN_S);chan R12_RS_W_IN := Vars(R12_IN_W);let R12_OUT_N := Vars(R12_RS_N_OUT);let R12_OUT_E := Vars(R12_RS_E_OUT);let R12_OUT_S := Vars(R12_RS_S_OUT);let R12_OUT_W := Vars(R12_RS_W_OUT);};
macro GridRouter13(chan R13_IN_N, chan R13_IN_E, chan R13_IN_S, chan R13_IN_W) => chan R13_OUT_N, chan R13_OUT_E, chan R13_OUT_S, chan R13_OUT_W {pred pred13N (p: package) {p.dst!=13&&(1==1)};pred pred13E (p: package) {p.dst!=13&&((p.dst==13||p.dst==12||p.dst==8||p.dst==9))};pred pred13S (p: package) {p.dst!=13&&(2==1)};pred pred13W (p: package) {p.dst!=13&&((p.dst==13||p.dst==12||p.dst==8||p.dst==9))};chan R13_RS_N_CONT, R13_RS_N_EJCT := Switch(R13_RS_S_IN, pred13N, otherwise);chan R13_RS_N_RBuf := Queue(2, R13_RS_N_CONT)[RS_N_RingBuf];chan R13_RS_N_SBuf := Queue(2, R13_RS_N_EJCT)[RS_N_IntermBuf];chan R13_RS_N_OUT := Merge(R13_RS_N_RBuf, R13_RS_N_INJ);chan R13_RS_E_CONT, R13_RS_E_EJCT := Switch(R13_RS_W_IN, pred13E, otherwise);chan R13_RS_E_RBuf := Queue(2, R13_RS_E_CONT)[RS_E_RingBuf];chan R13_RS_E_SBuf := Queue(2, R13_RS_E_EJCT)[RS_E_IntermBuf];chan R13_RS_E_OUT := Merge(R13_RS_E_RBuf, R13_RS_E_INJ);chan R13_RS_S_CONT, R13_RS_S_EJCT := Switch(R13_RS_N_IN, pred13S, otherwise);chan R13_RS_S_RBuf := Queue(2, R13_RS_S_CONT)[RS_S_RingBuf];chan R13_RS_S_SBuf := Queue(2, R13_RS_S_EJCT)[RS_S_IntermBuf];chan R13_RS_S_OUT := Merge(R13_RS_S_RBuf, R13_RS_S_INJ);chan R13_RS_W_CONT, R13_RS_W_EJCT := Switch(R13_RS_E_IN, pred13W, otherwise);chan R13_RS_W_RBuf := Queue(2, R13_RS_W_CONT)[RS_W_RingBuf];chan R13_RS_W_SBuf := Queue(2, R13_RS_W_EJCT)[RS_W_IntermBuf];chan R13_RS_W_OUT := Merge(R13_RS_W_RBuf, R13_RS_W_INJ);pred NICPred(p:package) {p.dst == 13||p.dst >= 16};chan R13_NIC_filter_drop,R13_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R13_NIC_filter_drop);pred injPred(p:package) {(p.dst==13||p.dst==12||p.dst==8||p.dst==9)};chan inj_X, inj_Y := Switch(R13_NIC_IN, injPred, otherwise);chan R13_X2Y_OUT := XYSwitch(13, inj_Y, R13_RS_W_SBuf, R13_RS_E_SBuf);pred x2ypred(p:package) {1==1};chan R13_RS_N_INJ, R13_RS_S_INJ := Switch(R13_X2Y_OUT, x2ypred, otherwise);chan R13_Y2X_OUT := XYSwitch(13, inj_X, R13_RS_N_SBuf, R13_RS_S_SBuf);pred y2xpred(p:package) {(p.dst==13||p.dst==12||p.dst==8||p.dst==9)};chan R13_RS_W_INJ, R13_RS_E_INJ := Switch(R13_Y2X_OUT, y2xpred, otherwise);chan R13_RS_N_IN := Vars(R13_IN_N);chan R13_RS_E_IN := Vars(R13_IN_E);chan R13_RS_S_IN := Vars(R13_IN_S);chan R13_RS_W_IN := Vars(R13_IN_W);let R13_OUT_N := Vars(R13_RS_N_OUT);let R13_OUT_E := Vars(R13_RS_E_OUT);let R13_OUT_S := Vars(R13_RS_S_OUT);let R13_OUT_W := Vars(R13_RS_W_OUT);};
macro GridRouter14(chan R14_IN_N, chan R14_IN_E, chan R14_IN_S, chan R14_IN_W) => chan R14_OUT_N, chan R14_OUT_E, chan R14_OUT_S, chan R14_OUT_W {pred pred14N (p: package) {p.dst!=14&&(1==1)};pred pred14E (p: package) {p.dst!=14&&((!(p.dst==15||p.dst==14||p.dst==10||p.dst==11)))};pred pred14S (p: package) {p.dst!=14&&(2==1)};pred pred14W (p: package) {p.dst!=14&&((!(p.dst==15||p.dst==14||p.dst==10||p.dst==11)))};chan R14_RS_N_CONT, R14_RS_N_EJCT := Switch(R14_RS_S_IN, pred14N, otherwise);chan R14_RS_N_RBuf := Queue(2, R14_RS_N_CONT)[RS_N_RingBuf];chan R14_RS_N_SBuf := Queue(2, R14_RS_N_EJCT)[RS_N_IntermBuf];chan R14_RS_N_OUT := Merge(R14_RS_N_RBuf, R14_RS_N_INJ);chan R14_RS_E_CONT, R14_RS_E_EJCT := Switch(R14_RS_W_IN, pred14E, otherwise);chan R14_RS_E_RBuf := Queue(2, R14_RS_E_CONT)[RS_E_RingBuf];chan R14_RS_E_SBuf := Queue(2, R14_RS_E_EJCT)[RS_E_IntermBuf];chan R14_RS_E_OUT := Merge(R14_RS_E_RBuf, R14_RS_E_INJ);chan R14_RS_S_CONT, R14_RS_S_EJCT := Switch(R14_RS_N_IN, pred14S, otherwise);chan R14_RS_S_RBuf := Queue(2, R14_RS_S_CONT)[RS_S_RingBuf];chan R14_RS_S_SBuf := Queue(2, R14_RS_S_EJCT)[RS_S_IntermBuf];chan R14_RS_S_OUT := Merge(R14_RS_S_RBuf, R14_RS_S_INJ);chan R14_RS_W_CONT, R14_RS_W_EJCT := Switch(R14_RS_E_IN, pred14W, otherwise);chan R14_RS_W_RBuf := Queue(2, R14_RS_W_CONT)[RS_W_RingBuf];chan R14_RS_W_SBuf := Queue(2, R14_RS_W_EJCT)[RS_W_IntermBuf];chan R14_RS_W_OUT := Merge(R14_RS_W_RBuf, R14_RS_W_INJ);pred NICPred(p:package) {p.dst == 14||p.dst >= 16};chan R14_NIC_filter_drop,R14_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R14_NIC_filter_drop);pred injPred(p:package) {(!(p.dst==15||p.dst==14||p.dst==10||p.dst==11))};chan inj_X, inj_Y := Switch(R14_NIC_IN, injPred, otherwise);chan R14_X2Y_OUT := XYSwitch(14, inj_Y, R14_RS_W_SBuf, R14_RS_E_SBuf);pred x2ypred(p:package) {1==1};chan R14_RS_N_INJ, R14_RS_S_INJ := Switch(R14_X2Y_OUT, x2ypred, otherwise);chan R14_Y2X_OUT := XYSwitch(14, inj_X, R14_RS_N_SBuf, R14_RS_S_SBuf);pred y2xpred(p:package) {p.dst % 4 < 14 % 4};chan R14_RS_W_INJ, R14_RS_E_INJ := Switch(R14_Y2X_OUT, y2xpred, otherwise);chan R14_RS_N_IN := Vars(R14_IN_N);chan R14_RS_E_IN := Vars(R14_IN_E);chan R14_RS_S_IN := Vars(R14_IN_S);chan R14_RS_W_IN := Vars(R14_IN_W);let R14_OUT_N := Vars(R14_RS_N_OUT);let R14_OUT_E := Vars(R14_RS_E_OUT);let R14_OUT_S := Vars(R14_RS_S_OUT);let R14_OUT_W := Vars(R14_RS_W_OUT);};
macro GridRouter15(chan R15_IN_N, chan R15_IN_E, chan R15_IN_S, chan R15_IN_W) => chan R15_OUT_N, chan R15_OUT_E, chan R15_OUT_S, chan R15_OUT_W {pred pred15N (p: package) {p.dst!=15&&(1==1)};pred pred15E (p: package) {p.dst!=15&&(2==1)};pred pred15S (p: package) {p.dst!=15&&(2==1)};pred pred15W (p: package) {p.dst!=15&&((p.dst==15||p.dst==14||p.dst==10||p.dst==11))};chan R15_RS_N_CONT, R15_RS_N_EJCT := Switch(R15_RS_S_IN, pred15N, otherwise);chan R15_RS_N_RBuf := Queue(2, R15_RS_N_CONT)[RS_N_RingBuf];chan R15_RS_N_SBuf := Queue(2, R15_RS_N_EJCT)[RS_N_IntermBuf];chan R15_RS_N_OUT := Merge(R15_RS_N_RBuf, R15_RS_N_INJ);chan R15_RS_E_CONT, R15_RS_E_EJCT := Switch(R15_RS_W_IN, pred15E, otherwise);chan R15_RS_E_RBuf := Queue(2, R15_RS_E_CONT)[RS_E_RingBuf];chan R15_RS_E_SBuf := Queue(2, R15_RS_E_EJCT)[RS_E_IntermBuf];chan R15_RS_E_OUT := Merge(R15_RS_E_RBuf, R15_RS_E_INJ);chan R15_RS_S_CONT, R15_RS_S_EJCT := Switch(R15_RS_N_IN, pred15S, otherwise);chan R15_RS_S_RBuf := Queue(2, R15_RS_S_CONT)[RS_S_RingBuf];chan R15_RS_S_SBuf := Queue(2, R15_RS_S_EJCT)[RS_S_IntermBuf];chan R15_RS_S_OUT := Merge(R15_RS_S_RBuf, R15_RS_S_INJ);chan R15_RS_W_CONT, R15_RS_W_EJCT := Switch(R15_RS_E_IN, pred15W, otherwise);chan R15_RS_W_RBuf := Queue(2, R15_RS_W_CONT)[RS_W_RingBuf];chan R15_RS_W_SBuf := Queue(2, R15_RS_W_EJCT)[RS_W_IntermBuf];chan R15_RS_W_OUT := Merge(R15_RS_W_RBuf, R15_RS_W_INJ);pred NICPred(p:package) {p.dst == 15||p.dst >= 16};chan R15_NIC_filter_drop,R15_NIC_IN:= Switch(Source(package),NICPred, otherwise);Sink(R15_NIC_filter_drop);pred injPred(p:package) {(p.dst==15||p.dst==14||p.dst==10||p.dst==11)};chan inj_X, inj_Y := Switch(R15_NIC_IN, injPred, otherwise);chan R15_X2Y_OUT := XYSwitch(15, inj_Y, R15_RS_W_SBuf, R15_RS_E_SBuf);pred x2ypred(p:package) {1==1};chan R15_RS_N_INJ, R15_RS_S_INJ := Switch(R15_X2Y_OUT, x2ypred, otherwise);chan R15_Y2X_OUT := XYSwitch(15, inj_X, R15_RS_N_SBuf, R15_RS_S_SBuf);pred y2xpred(p:package) {1==1};chan R15_RS_W_INJ, R15_RS_E_INJ := Switch(R15_Y2X_OUT, y2xpred, otherwise);chan R15_RS_N_IN := Vars(R15_IN_N);chan R15_RS_E_IN := Vars(R15_IN_E);chan R15_RS_S_IN := Vars(R15_IN_S);chan R15_RS_W_IN := Vars(R15_IN_W);let R15_OUT_N := Vars(R15_RS_N_OUT);let R15_OUT_E := Vars(R15_RS_E_OUT);let R15_OUT_S := Vars(R15_RS_S_OUT);let R15_OUT_W := Vars(R15_RS_W_OUT);};

chan R0_OUT_N, R0_OUT_E, R0_OUT_S, R0_OUT_W := GridRouter0(R0_OUT_N,R1_OUT_W,R4_OUT_N,R0_OUT_W); 
chan R1_OUT_N, R1_OUT_E, R1_OUT_S, R1_OUT_W := GridRouter1(R1_OUT_N,R2_OUT_W,R5_OUT_N,R0_OUT_E); 
chan R2_OUT_N, R2_OUT_E, R2_OUT_S, R2_OUT_W := GridRouter2(R2_OUT_N,R3_OUT_W,R6_OUT_N,R1_OUT_E); 
chan R3_OUT_N, R3_OUT_E, R3_OUT_S, R3_OUT_W := GridRouter3(R3_OUT_N,R3_OUT_E,R7_OUT_N,R2_OUT_E); 
chan R4_OUT_N, R4_OUT_E, R4_OUT_S, R4_OUT_W := GridRouter4(R0_OUT_S,R5_OUT_W,R8_OUT_N,R4_OUT_W); 
chan R5_OUT_N, R5_OUT_E, R5_OUT_S, R5_OUT_W := GridRouter5(R1_OUT_S,R6_OUT_W,R9_OUT_N,R4_OUT_E); 
chan R6_OUT_N, R6_OUT_E, R6_OUT_S, R6_OUT_W := GridRouter6(R2_OUT_S,R7_OUT_W,R10_OUT_N,R5_OUT_E); 
chan R7_OUT_N, R7_OUT_E, R7_OUT_S, R7_OUT_W := GridRouter7(R3_OUT_S,R7_OUT_E,R11_OUT_N,R6_OUT_E); 
chan R8_OUT_N, R8_OUT_E, R8_OUT_S, R8_OUT_W := GridRouter8(R4_OUT_S,R9_OUT_W,R12_OUT_N,R8_OUT_W); 
chan R9_OUT_N, R9_OUT_E, R9_OUT_S, R9_OUT_W := GridRouter9(R5_OUT_S,R10_OUT_W,R13_OUT_N,R8_OUT_E); 
chan R10_OUT_N, R10_OUT_E, R10_OUT_S, R10_OUT_W := GridRouter10(R6_OUT_S,R11_OUT_W,R14_OUT_N,R9_OUT_E); 
chan R11_OUT_N, R11_OUT_E, R11_OUT_S, R11_OUT_W := GridRouter11(R7_OUT_S,R11_OUT_E,R15_OUT_N,R10_OUT_E); 
chan R12_OUT_N, R12_OUT_E, R12_OUT_S, R12_OUT_W := GridRouter12(R8_OUT_S,R13_OUT_W,R12_OUT_S,R12_OUT_W); 
chan R13_OUT_N, R13_OUT_E, R13_OUT_S, R13_OUT_W := GridRouter13(R9_OUT_S,R14_OUT_W,R13_OUT_S,R12_OUT_E); 
chan R14_OUT_N, R14_OUT_E, R14_OUT_S, R14_OUT_W := GridRouter14(R10_OUT_S,R15_OUT_W,R14_OUT_S,R13_OUT_E); 
chan R15_OUT_N, R15_OUT_E, R15_OUT_S, R15_OUT_W := GridRouter15(R11_OUT_S,R15_OUT_E,R15_OUT_S,R14_OUT_E); 
