// Modelling a generic XY routing 2D mesh
// Author: Julien Schmaltz
// Deadlock
// Parametric mesh with master&slave nodes.
// This corresponds to our 2D-MS in our FMCAD'11 paper.
// current tests, they all have a deadlock, uses --abc-bmc engine
// plus -- no-invariant flag
// XDIM YDIM XBITS YBITS 
//  2    2     0    0     3.5 seconds
//  3    2     1    0     12  seconds
//  3    3     1    1     884 seconds
//  2    3     0    1     
//  4    3     2    1     
//  4    4     2    2     
//  5    4     2    2     
//  5    5     2    2     
//  6    6     2    2     
//  This is as expected order of magnitudes slower than cycle detection.
//  For 3x3 IFV has no problem finding deadlocks !!
//  Note: would this be a general patterns: the "easy" networks are also easy for other tools?


param int QSIZE = 2; // size of input buffers
param int XDIM = 2;  // size of the x dimension
param int YDIM = 2;  // size of the y dimension
// WARNING: XDIM > 1 and YDIM > 1
// values of the size of the bit-vectors representing
// sources and destinations
param int XBITS = 0;
param int YBITS = 0;
param int CSIZE = 2; // size of the credit counter (not needed in this file)

param int WITH_LOCAL_QUEUE = 1; // 1 local queue at injection points, 0 no local queues

param int WITH_OT_LIM = 1; // 0 no limit on OT, 1 limit to OT
param int N = 256; // max OT's

struct Pkt {
  destx : [XBITS:0]; // x-coordinate of the destination
  desty : [YBITS:0]; // y-coordinate of the destination
  srcx  : [XBITS:0]; // x-coordinate of the source
  srcy  : [YBITS:0]; // y-coordinate of the soruce
  type  : [0:0]; // 1 = request, 0 = response
};

const tok; // required by our macro library

uses lib.main;
uses lib.paramrouter;
uses lib.masterslave;
// Generate the local nodes

bus<XDIM*YDIM> srcs; // bus containing the local inputs
for (int y = 0; y<YDIM;y++) {
    for (int x = 0; x < XDIM; x++) {
    	if (WITH_OT_LIM == 0) {
    		let srcs[x+y*XDIM] := MasterSlaveNode(x,y,allOUTS[x*5+y*XDIM*5]);
    	}
    	else {
			let srcs[x+y*XDIM] := MasterSlaveNodeN(x,y,N,allOUTS[x*5+y*XDIM*5]);
    	};
    };
};

// Generate all routers

bus<5*XDIM*YDIM> allOUTS; // bus containing all channels
for (int y = 0; y < YDIM; y++) {
    for (int x = 0; x < XDIM ; x++) {
       if (y == 0) {
         if (x == 0) {
	    let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
	    XYRouter5P(x,y,srcs[x+y*XDIM],deadSource(), allOUTS[y*XDIM*5+(x+1)*5+1],allOUTS[(y+1)*XDIM*5+x*5+4], deadSource());
	 }
	 else {
	      if (x == XDIM - 1) {
	      let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
              XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],deadSource(),allOUTS[(y+1)*XDIM*5+x*5+4],deadSource());
	    }
	    else { // y== 0 and 0 < x < XDIM-1
	      let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
              XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],allOUTS[y*XDIM*5+(x+1)*5+1],allOUTS[(y+1)*XDIM*5+x*5+4],deadSource());
	    };
	 };
       }
       else {
          if (y == YDIM - 1) {
	     if (x == 0) {
	        let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                XYRouter5P(x,y,srcs[x+y*XDIM],deadSource(),allOUTS[y*XDIM*5+(x+1)*5+1],deadSource(),allOUTS[(y-1)*XDIM*5+x*5+3]);
	     }
	     else {
	        if (x == XDIM - 1) {
		   let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                   XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],deadSource(),deadSource(),allOUTS[(y-1)*XDIM*5+x*5+3]);
		}
		else { // y = YDIM-1 and x is arbitrary
		   let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                   XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],allOUTS[y*XDIM*5+(x+1)*5+1],deadSource(),allOUTS[(y-1)*XDIM*5+x*5+3]);
		};
	     };
	  }
	  else { // y is arbitrary
	     if (x == 0) {
	      let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
              XYRouter5P(x,y,srcs[x+y*XDIM],deadSource(),allOUTS[y*XDIM*5+(x+1)*5+1],allOUTS[(y+1)*XDIM*5+x*5+4],allOUTS[(y-1)*XDIM*5+x*5+3]);	      
	     }
	     else {
	        if (x == XDIM - 1) {
		   let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                   XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2], deadSource(),allOUTS[(y+1)*XDIM*5+x*5+4],allOUTS[(y-1)*XDIM*5+x*5+3]);	      
		}
		else {
		   let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                   XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],allOUTS[y*XDIM*5+(x+1)*5+1],allOUTS[(y+1)*XDIM*5+x*5+4],allOUTS[(y-1)*XDIM*5+x*5+3]);	      
		};
	     };
	  };
       };
    };
};

// We sink all outputs at the border.
// (they should never receive anything. So, we make them dead to find errors)
for (int y = 0; y < YDIM ; y++) {
   for (int x = 0; x < XDIM ; x++){
       if (y == 0) {
          if (x == 0) {	
             DeadSink(allOUTS[y*XDIM*5+x*5+1]);
	     DeadSink(allOUTS[y*XDIM*5+x*5+4]);
	  }
	  else {
	     if (x == XDIM-1) { 
	        DeadSink(allOUTS[y*XDIM*5+x*5+2]);
		DeadSink(allOUTS[y*XDIM*5+x*5+4]);
	     }
	     else { // y = 0 but x is in the middle
	        DeadSink(allOUTS[y*XDIM*5+x*5+4]);		
            };
	  };
       }
       else {
          if (y == YDIM - 1) {
	     if (x == 0) {
	        DeadSink(allOUTS[y*XDIM*5+x*5+1]);
		DeadSink(allOUTS[y*XDIM*5+x*5+3]);		
	     }
	     else {
	        if (x == XDIM - 1) {
		   DeadSink(allOUTS[y*XDIM*5+x*5+2]);
		   DeadSink(allOUTS[y*XDIM*5+x*5+3]);
		}
		else { // y == YDIM - 1 but x is in the middle
		   DeadSink(allOUTS[y*XDIM*5+x*5+3]);
		};
	     };
	  }
	  else { // y is in the middle
	     if (x == 0) {
	        DeadSink(allOUTS[y*XDIM*5+x*5+1]);
	     }
	     else {
	        if (x == XDIM - 1) {
		   DeadSink(allOUTS[y*XDIM*5+x*5+2]);
		}
		else {
		};
	     };
	  };       
       };
   };
};
