// Modelling a generic XY routing 2D mesh
// Author: Julien Schmaltz
// Deadlock-free
// v00: 03.05.2016
// Parametric mesh.
// Uses XY routing. Should be deadlock-free.
// This corresponds to 2D-XY in our FMCAD'11 Paper
// current tests
// XDIM YDIM XBITS YBITS 
//  2    2     0    0     OK - deadlock-free    0.5  seconds smt-only  140 components  12 queues
//  3    2     1    0     OK - deadlock-free    1.02 seconds smt-only  224 components  20 queues
//  3    3     1    1     OK - deadlock-free    2.5  seconds smt-only  357 components  33 queues
//  4    3     2    1     OK - deadlock-free    5.5  seconds smt-only  490 components  46 queues
//  4    4     2    2     OK - deadlock-free   12.2 seconds smt-only  672 components  64 queues
//  5    4     2    2     OK - deadlock-free   24.5 seconds smt-only  854 components  82 queues
//  5    5     2    2     OK - deadlock-free   46.9 seconds smt-only 1085 components 105 queues
//  6    6     2    2     OK - deadlock-free   180  seconds smt-only 1596 components 156 queues
//  7    7     2    2     OK - deadlock-free   480  seconds smt-only 2205 components 217 queues (8 min)
//  8    7     3    2     OK - deadlock-free   900  seconds smt-only 2534 components 250 queues (15 min)
//  8    8     3    3     OK - deadlock-free  1800  seconds smt-only 2912 components 288 queues (30 min)
//  9    9     3    3     OK - deadlock-free  1800  seconds smt-only 3717 components 369 queues (30 min)
// 98m36.830s
//  This is as expected order of magnitudes slower than cycle detection.
// 
// Same table but with reachability only (they are all deadlock-free, so IC3M should be the best tool)
//  2    2     0    0     0.5
//  3    2     1    0     1.0 
//  3    3     1    1     1.9
//  4    3     2    1     5.0
//  4    4     2    2     8.0
//  5    4     2    2    16.5 
//  5    5     2    2    40.0 
//  6    6     2    2   180.0  


param int QSIZE = 2; // size of input buffers
param int XDIM = 4;  // size of the x dimension
param int YDIM = 4;  // size of the y dimension
// WARNING: XDIM > 1 and YDIM > 1
// values of the size of the bit-vectors representing
// sources and destinations
param int XBITS = 2;
param int YBITS = 2;
param int CSIZE = 2; // size of the counters (unused here)

param int WITH_LOCAL_QUEUE = 1; // 1 local queue at injection points, 0 no local queues


// I would here like to write:
// destx : [0 .. XDIM-1]
// desty : [0 .. YDIM-1]
struct Pkt {
  destx : [XBITS:0]; // x-coordinate of the destination
  desty : [YBITS:0]; // y-coordinate of the destination
};

const tok; // required by our macro library

uses lib.main;
uses lib.paramrouter;

// Generate the local sources

bus<XDIM*YDIM> srcs; // bus containing the local inputs
for (int y = 0; y<YDIM;y++) {
    for (int x = 0; x < XDIM; x++) {
    	let srcs[x+y*XDIM] := FilterXY2(x,y,Source(Pkt));
    };
};

// Generate all routers

bus<5*XDIM*YDIM> allOUTS; // bus containing all channels
for (int y = 0; y < YDIM; y++) {
    for (int x = 0; x < XDIM ; x++) {
       if (y == 0) {
         if (x == 0) {
	    let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
	    XYRouter5P(x,y,srcs[x+y*XDIM],deadSource(), allOUTS[y*XDIM*5+(x+1)*5+1],allOUTS[(y+1)*XDIM*5+x*5+4],deadSource());
	 }
	 else {
	      if (x == XDIM - 1) {
	      let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
              XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],deadSource(),allOUTS[(y+1)*XDIM*5+x*5+4],deadSource());
	    }
	    else { // y== 0 and 0 < x < XDIM-1
	      let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
              XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],allOUTS[y*XDIM*5+(x+1)*5+1],allOUTS[(y+1)*XDIM*5+x*5+4],deadSource());
	    };
	 };
       }
       else {
          if (y == YDIM - 1) {
	     if (x == 0) {
	        let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                XYRouter5P(x,y,srcs[x+y*XDIM],deadSource(),allOUTS[y*XDIM*5+(x+1)*5+1],deadSource(),allOUTS[(y-1)*XDIM*5+x*5+3]);
	     }
	     else {
	        if (x == XDIM - 1) {
		   let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                   XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],deadSource(),deadSource(),allOUTS[(y-1)*XDIM*5+x*5+3]);
		}
		else { // y = YDIM-1 and x is arbitrary
		   let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                   XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],allOUTS[y*XDIM*5+(x+1)*5+1],deadSource(),allOUTS[(y-1)*XDIM*5+x*5+3]);
		};
	     };
	  }
	  else { // y is arbitrary
	     if (x == 0) {
	      let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
              XYRouter5P(x,y,srcs[x+y*XDIM],deadSource(),allOUTS[y*XDIM*5+(x+1)*5+1],allOUTS[(y+1)*XDIM*5+x*5+4],allOUTS[(y-1)*XDIM*5+x*5+3]);	      
	     }
	     else {
	        if (x == XDIM - 1) {
		   let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                   XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],deadSource(),allOUTS[(y+1)*XDIM*5+x*5+4],allOUTS[(y-1)*XDIM*5+x*5+3]);	      
		}
		else {
		   let allOUTS[y*XDIM*5+x*5],allOUTS[y*XDIM*5+x*5+1],allOUTS[y*XDIM*5+x*5+2],allOUTS[y*XDIM*5+x*5+3],allOUTS[y*XDIM*5+x*5+4] :=
                   XYRouter5P(x,y,srcs[x+y*XDIM],allOUTS[y*XDIM*5+(x-1)*5+2],allOUTS[y*XDIM*5+(x+1)*5+1],allOUTS[(y+1)*XDIM*5+x*5+4],allOUTS[(y-1)*XDIM*5+x*5+3]);	      
		};
	     };
	  };
       };
    };
};

// We sink all outputs at the border.
// (they should never receive anything. So, we make them dead to find errors)
for (int y = 0; y < YDIM ; y++) {
   for (int x = 0; x < XDIM ; x++){
       if (y == 0) {
          if (x == 0) {	
             DeadSink(allOUTS[y*XDIM*5+x*5+1]);
	     DeadSink(allOUTS[y*XDIM*5+x*5+4]);
	  }
	  else {
	     if (x == XDIM-1) { 
	        DeadSink(allOUTS[y*XDIM*5+x*5+2]);
		DeadSink(allOUTS[y*XDIM*5+x*5+4]);
	     }
	     else { // y = 0 but x is in the middle
	        DeadSink(allOUTS[y*XDIM*5+x*5+4]);		
            };
	  };
       }
       else {
          if (y == YDIM - 1) {
	     if (x == 0) {
	        DeadSink(allOUTS[y*XDIM*5+x*5+1]);
		DeadSink(allOUTS[y*XDIM*5+x*5+3]);		
	     }
	     else {
	        if (x == XDIM - 1) {
		   DeadSink(allOUTS[y*XDIM*5+x*5+2]);
		   DeadSink(allOUTS[y*XDIM*5+x*5+3]);
		}
		else { // y == YDIM - 1 but x is in the middle
		   DeadSink(allOUTS[y*XDIM*5+x*5+3]);
		};
	     };
	  }
	  else { // y is in the middle
	     if (x == 0) {
	        DeadSink(allOUTS[y*XDIM*5+x*5+1]);
	     }
	     else {
	        if (x == XDIM - 1) {
		   DeadSink(allOUTS[y*XDIM*5+x*5+2]);
		}
		else {
		};
	     };
	  };       
       };
   };
};

// We need to Sink all local outs
for (int i = 0; i < XDIM*YDIM;i++) {
    Sink(allOUTS[i*5]);
};
