// Modelling a shorest path Spidergon
// Write invalidate CC Spidergon from our TODAES 2012 paper
// but using FSMs.


param int QSIZE = 2;
param int SIZE = 4; // #bits to encode the number of nodes.
param int NUM_NODE = 4 ; // number of nodes in a quadrant

struct WISpidergonPkt {
    destN : [SIZE-1:0]; // destination node
    type  : [0:0];     // 0 = read, 1 = write    
};


macro SPRouterLogic (int Current, chan inPort) => bus<4> outPorts {
    // Shortest path routing logic for Spidergon
    // We implement across first
    // outputs
    // outPorts<0>: local out
    // outPorts<1>: across out
    // outPorts<2>: cw out
    // outPorts<3>: ccw out

    // first check for across move

    // if dest = curr then stops
    // else
    // Routing algorithm
    // IF (dest - curr) % 4*N <= N THEN Clockwise
    // ELSE IF (dest - curr)  % 4*N >= 3*N THEN CounterClockwise
    // ELSE across

    pred SwitchP0 (p: SPRouter8pkt) {
        p.destN == Current
    };
 
    pred SwitchP1 (p: SPRouter8pkt) {
        ((p.destN-Current)%(4*NUM_NODE)) <= NUM_NODE
    };

    pred SwitchP2 (p: SPRouter8pkt) {
        ((p.destN-Current)%(4*NUM_NODE)) >= (3* NUM_NODE)
    };

    chan notAtDest;
    chan notCW;
    let outPorts[0],notAtDest := Switch(inPort,SwitchP0,otherwise);
    let outPorts[2], notCW := Switch(notAtDest,SwitchP1,otherwise);
    let outPorts[3], outPorts[1] := Switch(notCW,SwitchP2,otherwise);

}; // end SPRouterLogic


macro Merge4 (bus<4> inPorts) => chan o {
    let o:= Merge(inPorts[3], Merge(inPorts[2], Merge(inPorts[0],inPorts[1])));
};

macro SPRouter (int nodeID, bus<4> inPorts) => bus<4> outPorts {
    // inputs
    // inPorts[0]: from local in
    // inPorts[1]: from across in
    // inPorts[2]: from cw neighbour in
    // inPorts[3]: from ccw neighbour in
    // outputs
    // outPorts[0]: local out
    // outPorts[1]: to across out
    // outPorts[2]: to cw out
    // outPorts[3]: to ccw out

    // Router has output queues
    // Each input is routed independently


    bus<4> routedINLocal,routedINACR, routedINCW,routedINCCW;

    // we instantiate the routing logic for each input
    let routedINLocal := SPRouterLogic(nodeID,inPorts[0]);
    let routedINACR   := SPRouterLogic(nodeID,inPorts[1]);
    let routedINCW    := SPRouterLogic(nodeID,inPorts[2]);
    let routedINCCW   := SPRouterLogic(nodeID,inPorts[3]);

    // we then merge all the outputs

    for (int i = 0;i<4;i++){
        let outPorts[i] :=
        	Queue(QSIZE,Merge4(routedINLocal[i],routedINACR[i],routedINCW[i],routedINCCW[i]));
    };

}; // end SPRouter

// we now create the Spidergon

macro PacketFilter (int NodeID, chan input) => chan o {
    // this filtering makes everything smaller
    // it is only useful if the parameters are such
    // that invalid routes can be generated.
    // Otherwise, it is unnecessary. It filters nothing.
    chan toSink;
    let toSink,o := Switch(input,SPRouter8pkt.destN==NodeID,otherwise);
    Sink(toSink);
};

// we create NUM_NODE * 4 sources
bus<NUM_NODE*4> srcs;
for (int i = 0; i<4*NUM_NODE;i++) {
    let srcs[i] := PacketFilter(i,Source(SPRouter8pkt));
};

bus<4*NUM_NODE*4> allOUTS; // bus with all output channels for the entire network

// we generate the border cases
for (int i = 0;i<NUM_NODE*4;i++) {
    let allOUTS[4*i], allOUTS[4*i+1], allOUTS[4*i+2], allOUTS[4*i+3]
    := SPRouter(i,srcs[i]
      ,allOUTS[4*((i+2*NUM_NODE)%(4*NUM_NODE))+1] // ACR in
      ,allOUTS[4*((i-1)%(4*NUM_NODE))+2] // CW IN
      ,allOUTS[4*((i+1)%(4*NUM_NODE))+3]); // CCW in
};

// we sink all local outputs
for (int i = 0;i<NUM_NODE*4;i++) {
    Sink(allOUTS[4*i]);
};
