const tok;
const high;
const low;
const on;
const off;

enum signal {high;low;};
enum onoff {on;off;};
struct comb{
  d0: onoff;
  d1: onoff;
};

function combo_off():comb {
  d0 = off;
  d1 = off;
};

function combo_fst_on(st_var:comb):comb {
  d0 = on;
  d1 = st_var.d1;
};

function combo_snd_on(st_var:comb):comb {
  d0 = st_var.d0;
  d1 = on;
};

function combo_fst_off(st_var:comb):comb {
  d0 = off;
  d1 = st_var.d1;
};

function combo_snd_off(st_var:comb):comb {
  d0 = st_var.d0;
  d1 = off;
};

pred f(act1:signal,act2:signal) {
  act1 == high;
};

uses device;
uses controller;
uses top_controller;
uses act_gen;
uses act_combo;
uses state_combo;
uses signal_combo;

macro dev_con1 () => chan global_state, chan global_action {

chan deny1;
chan req1;
chan active1;
chan active1_1;

let req1,global_state := controller(deny1,active1_1);
let deny1,active1 := device(req1);

let global_action,active1_1 := Fork(active1);

};
