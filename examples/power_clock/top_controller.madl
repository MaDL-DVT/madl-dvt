const tok;
const high;
const low;
const on;
const off;
enum signal {high;low;};
enum onoff {on;off;};
struct comb{
  d0: onoff;
  d1: onoff;
};

macro top_controller(chan i_power, chan i_action) => chan power {

process top_contr(chan i_pow, chan i_act) => chan o_pow {
  state OFF(){
    trans {
      high d <- i_pow;
      next TO_ON1();
    };

    trans {
      high d <- i_act;
      next TO_ON2();
    };

  };

  state TO_ON1(){
    trans {
      high d <- i_act;
      high -> o_pow;
      next ON();
    };
    trans {
      low d <- i_pow;
      next OFF();
    };
  };

  state TO_OFF1(){
    trans {
      high d <- i_act;
      next ON();
    };
    trans {
      low d <- i_pow;
      low -> o_pow;
      next OFF();
    };
  };

  state TO_ON2(){
    trans {
      low d <- i_act;
      next OFF();
    };
    trans {
      high d <- i_pow;
      high -> o_pow;
      next ON();
    };
  };

  state TO_OFF2(){
    trans {
      low d <- i_act;
      low -> o_pow;
      next OFF();
    };
    trans {
      high d <- i_pow;
      next ON();
    };
  };

  state ON(){
    trans {
      low d <- i_pow;
      next TO_OFF2();
    };
    trans {
      low d <- i_act;
      next TO_OFF1();
    };
  };

};

let power := Queue(1,top_contr(i_power,i_action));

};
