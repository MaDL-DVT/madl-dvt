const tok;
const high;
const low;
const on;
const off;
enum signal {high;low;};
enum onoff {on;off;};
struct comb{
  d0: onoff;
  d1: onoff;
};

macro top_controller(chan i_power, chan i_action) => chan power {

process Top_contr(chan deny,chan active) => chan o_pow {
  state CONTROLLER_OFF() {
    trans {
      high d <- active;
      next CONTROLLER_TO_ON();
    };

  };

  state CONTROLLER_TO_ON() {
    trans {
      high -> o_pow;
      next CONTROLLER_ON();
    };
  };

  state CONTROLLER_ON() {
    trans {
      low d <- active;
      next CONTROLLER_TO_OFF();
    };

  };

  state CONTROLLER_TO_OFF() {
    trans {
      high d <- deny;
      next CONTROLLER_DENIED();
    };

    trans {
      low d <- deny;
      low -> o_pow;
      next CONTROLLER_OFF();
    };
  };

  state CONTROLLER_DENIED() {
    trans {
      high d <- active;
      next CONTROLLER_ON();
    };
  };

};

let power := Queue(1,Top_contr(i_power,i_action));

};
