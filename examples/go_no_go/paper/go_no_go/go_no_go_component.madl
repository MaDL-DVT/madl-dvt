const token_t;

const ok;

const nok;

const go;

const no_go;

enum ok_t{
     ok;
     nok;
};

enum go_t{
     go;
     no_go;
};

macro go_no_go_component(chan in__OUT, chan in_other__OUT) => chan out, chan out_other {
let out := Vars(buffout__OUT);
chan buffout__OUT := Queue(1, COMP0_fsm__out)[buffout];
let out_other := Vars(buffout_other__OUT);
chan buffout_other__OUT := Queue(1, COMP0_fsm__out_other)[buffout_other];
// Enter function declarations here.
process COMP0_fsm (chan in, chan in_other) => chan out, chan out_other {
state INIT ( ) {
trans {
    ok_t d <- in;
    d -> out_other;
    next WAIT_FOR_OTHER(d);

};
};
state WAIT_FOR_OTHER (ok_t stVar) {
trans {
    ok_t d <- in_other;
    ok -> out;
    guard d == ok && stVar == ok;
    next INIT();

};
trans {
    ok_t d <- in_other;
    nok -> out;
    guard d == nok || stVar == nok;
    next INIT();

};
};
};
chan COMP0_fsm__out, COMP0_fsm__out_other := COMP0_fsm(in__OUT, in_other__OUT)[COMP0_fsm];

 };
